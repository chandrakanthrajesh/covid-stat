<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css" />
    <link rel="stylesheet" href="../assets/style.css">
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        #map{position: absolute;top:0;bottom:0;left:0;right:0;}
    </style>
</head>
<body>
    <%- include('partials/header.ejs') %>
        <script src="//d3js.org/d3.v3.min.js" charset="utf-8"></script>
        <script src="//d3js.org/topojson.v1.min.js"></script>
        <div id='map'></div>
        <script>
            //not useful now, for future reference 
            var corner1 = L.latLng(40.712, -74.227),
                corner2 = L.latLng(40.774, -74.125),
                bounds = L.latLngBounds(corner1, corner2);

            //setting up the name zoom and boundary
            var map = L.map('map', {
                zoom: 2
            }).fitBounds([
                [84.54136107313408, 189.14062500000003],
                [-58.07787626787517, -169.45312500000003]
            ]);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // L.marker([51.5, -0.09]).addTo(map)
            //     .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
            //     .openPopup();



            myFunction = () => {
                console.log("bounds: ", map.getBounds());
                console.log("zoom: ", map.getZoom());
                console.log("center: ", map.getCenter());
            }

            loadIt = () => {
                //co ordin ates o fthe boundary, it is loading the coordinates async
                d3.json("/resources/geojson/geoCoordinates_1.json", function(json) {
                    //border styling
                    function style(feature) {
                        return {
                            fillColor: "#E3E3E3",
                            weight: 1,
                            opacity: 0.4,
                            color: 'black',
                            fillOpacity: 0.3
                        };
                    }
                    C = L;
                    C.geojson = L.geoJson(json, {
                        onEachFeature: onEachFeature,
                        style: style
                    }).addTo(map);
                    //mouse over and mouse out
                    function onEachFeature(feature, layer) {
                        layer.on({
                            click: onCountryClick,
                            mouseover: onCountryHighLight,
                            mouseout: onCountryMouseOut
                        });
                    }
                });
            }

            loadIt();

            /**
             * Callback for mouse out of the country border. Will take care of the ui aspects, and will call
             * other callbacks after done.
             * @param e the event
             */
            function onCountryMouseOut(e) {
                //set and reset to highlight 
                C.geojson.resetStyle(e.target);
                //	$("#countryHighlighted").text("No selection");

                var countryName = e.target.feature.properties.name;
                var countryCode = e.target.feature.properties.iso_a2;
                //callback when mouse exits a country polygon goes here, for additional actions
            }

            /**
             * Callback for when a country is clicked. Will take care of the ui aspects, and it will call
             * other callbacks when done
             * @param e
             */
            function onCountryClick(e) {
                //callback for clicking inside a polygon
            }

            /**
             * Callback for when a country is highlighted. Will take care of the ui aspects, and it will call
             * other callbacks after done.
             * @param e
             */
            function onCountryHighLight(e) {
                var layer = e.target;

                layer.setStyle({
                    weight: 2,
                    color: '#666',
                    fillColor: 'blue',
                    dashArray: '',
                    fillOpacity: 0.7 
                });

                if (!L.Browser.ie && !L.Browser.opera) {
                    layer.bringToFront();
                }

                var countryName = e.target.feature.properties.name;
                var countryCode = e.target.feature.properties.iso_a2;
                //callback when mouse enters a country polygon goes here, for additional actions
            }
        </script>

        <button onclick="myFunction()">Click me</button>
</body>
</html>